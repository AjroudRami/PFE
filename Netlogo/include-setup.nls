;Contient les attributs et fonctions 
;nécessaire au setup du modèle

;;; All needed T0 functions
globals [
 proba-Aristocrat
 proba-Rich
 proba-Farmer 
 money-Aristocrat
 money-Rich
 money-Farmer
 minimumExploitation-Aristocrat
 minimumExploitation-Rich
 minimumExploitation-Farmer
 rov-Farmer
 rov-Rich
 rov-Aristocrat
 maxVilla-Farmer
 maxVilla-Rich
 maxVilla-Aristocrat
]

to constantes-setup
  set duree-simulation 300
  set villa "villa"
  set farm "farm"
  set aristocrat "aristocrat"
  set rich "rich"
  set farmer "farmer"
  set CapitalInfluenceRadius 27
end

;Fonction qui définit la valeur du seuil High/Low profit
to setup-profit
  set profit-farm 600
  set profit-villa 6000
end

;Fonction qui sert à mettre en place les villes
to setupTown
  doGis
end

;Fontion qui met donne aux patchs leur types de paysages
to setupLandscapeType
  ask patches [
    set haveTools false
    set landscapeType random(5)

  ]

  ;;Optionnnel sert à faire des agrégat de région
  repeat 50
  [ ask patches
    [ set landscapeType [landscapeType] of one-of neighbors4 ] ]
end

;Fonction qui associe un pouvoir agricole aux patches (piece of land)
; en choississant au hasard un climat
to setupClimatique
;  let m1 matrix:from-row-list [
;     Optimal - Hot&Humid - Hot&dRY - Cold&Humid - Cold&Dry
;   [100 50 70 20 40] ;;alumnial
;   [100 70 30 40 30] ;; Foothills
;   [50 35 10 20 10] ;; Plateaux
;   [75 22.5 45 15 30] ;; Seidmentary Basin
;   [25 2.5 5 2.5 5] ;; Hillslopes
;  ]

  let clim random(5)

  ask patches [
    set climat clim
    set agrologicalPower (item climat(item landscapeType climatique-data))
    ]
end

;Crée les "owners" et associe un rang à chacun d'eux
to setupLandOwners
  create-owners (20)
  set proba-Aristocrat 75 ;10
  set proba-Rich 95 ; 25
  set proba-Farmer 101 ;101
  ask owners [
    let type-owner random(101)
    ifelse type-owner < proba-Aristocrat [set type-owner 2] [ifelse type-owner < proba-Rich [set type-owner 1][set type-owner 0]] ;
    set rank item type-owner ["farmer" "rich" "aristocrat"]
    color-owners
    set numberOfExploitation 0
    if rank = farmer [set cerveau-bdi farmer-DBI]
    ;show cerveau-bdi
    
    set listExploitation []
  ]
end

;;Associe à chaque owners : son pouvoir éco, son nombre max d'établissements, son rayon d'action (selon son rang)
to setupmoney
  set money-Farmer 1000
  set money-Rich 3000
  set money-Aristocrat 5000
  
  ask owners[
  ifelse rank = farmer [ set money random(money-Farmer) set maxNumberExploitation 1 set radiusOfView 1]
  [ifelse rank = rich [set money random(money-Rich) set maxNumberExploitation 3 set radiusOfView 20] ;; 20 patch = 100ha
    [set money random(money-Aristocrat) set maxNumberExploitation 6 set radiusOfView max-pycor]] ;;aristocrats
  ]
end

;Associe un nombre aléatoire d'exploitations à chaque owners et
;les crée aléaoirement dans le monde
to setupExploitationPerOwners  
  ask owners [
    ifelse rank = farmer [ set numberOfExploitation (random(2) + 1) set minNumberVilla 0]
    [ifelse rank = rich [set numberOfExploitation (random(4) + 1) set minNumberVilla 1]
      [set numberOfExploitation (random(4) + 1) set minNumberVilla 3]]
    repeat maxNumberExploitation [create-exploitation who]
  ]
 end

;Associe une valeur symbolique à chaque exploitations
to setupSymbolic
  ask exploitations[
    let _owner owner landowner
    let _rank [rank] of _owner
    ifelse  _rank = farmer [ set symbolicvalue 3 ]
    [set symbolicvalue random(4)]
    
    if distance one-of towns with [isCapital] < CapitalInfluenceRadius [set symbolicvalue symbolicvalue + 1]
  ]
end

;Associe aléatoirement la présence de structures agricoles sur les patches (pieces of lands) des exploitations
to setupAgricultureStructure
  ask exploitations[
    let x random(100)
    if x < 50 [ foreach listofpatches [set haveTools true]
    ]
  ]
end

;Associe un nombre d'années aléatoire d'exploitation aux patches (pieces of lands) des exploitations  
to setupYearsOfExploitation
  ask exploitations[
    let x random(10)
    foreach listofpatches [set yearsExploited x]
  ]
end

;Initialise le fait que les owners ai fait du profit ou non l'an passé
to randomEcoPowerOwners
ask owners[
   set oldmoney money
   let p random(3)
    ifelse p = 0 [ set money (money - 50) ]
    [if p = 1 [set money (money + 50)] ]
      ;; 2 does nothing
  ]
end

;Crée une exploitation pour l'owner "lOwner"
;Appelée seulement lors du setup t lorsqu'on abandonne une villa proche de la capital
to create-exploitation [lOwner]
  
  let _capital one-of towns with [isCapital]
  let _near CapitalInfluenceRadius ;rayon d'influence (en patch) de la capitale
  let _emplacementDispo patches with [distance _capital < _near and is-exploited = false]
  let _emplacement one-of _emplacementDispo
  let _anywhere one-of patches with [is-exploited = false]
  let _r [rank] of owner lOwner
  
  ;Pour les aristocrats qui n'ont pas d'exploitation dans le rayon d'influence de la capitale
  ;Vont donc choisir un emplacement proce de la capital
  ifelse _r = aristocrat [ 
    let _exploit count (turtle-set listExploitation) with [distance one-of (towns with [isCapital]) < CapitalInfluenceRadius]
    if _exploit != 0 [set _emplacement _anywhere]];true 
 [set _emplacement _anywhere] ;false
  ask _emplacement [
    set is-exploited true
    set pcolor black
    sprout-exploitations 1 [
      set landowner lOwner
      set shape "house"
      set listofpatches (list patch-here)
      set symbolicvalue random(4)
      set totalproduction 0
      ifelse not-enough-villa? [do-villa][do-farm] 
      ifelse typeOfExploitation = farm [set color [color] of owner lOwner][set color [color-villa] of owner lOwner]
      set notRentable 0
      set totalaccesibility 0
      ask owner lOwner [
          set listExploitation lput myself listExploitation
          ifelse ([typeOfExploitation] of myself) = farm [set farmbought farmbought + 1 ] 
        [set villabought villabought + 1 ]
      ] ;; fin ask owner
       repeat minsizeofland [ enlarge2 listofpatches ]
    ] ;; fin sprout
  ] ;; fin ask emplacement
end

;Fonction faisant remontée des infos de debug
to test
  ;show [who] of owners with [rank = aristocrat]
  let _l []
  ask exploitations with [typeOfExploitation = villa] [ 
    let _r [rank] of owner landowner
    if distance one-of (towns with [isCapital]) < CapitalInfluenceRadius  and _r = aristocrat[set _l lput landowner _l]] 
 ; ask towns with [isCapital] [ask patches in-radius CapitalInfluenceRadius [set pcolor red]] affiche le rayon d'influence de la capitale
 
end


