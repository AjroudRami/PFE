;Contient des fonctions utilitaires au modèle
;et les attributs qui leurs sont nécessaires

;Définition des variables globales necessaires aux fonctions "Utilitaires"
globals[
   ;Conteneur des donnees issus des fichiers
  climatique-data

  ;valeur qui délimite High Profit from Low Profit
  profit-farm
  profit-villa
]

;;Utils
to impactYearsExploitation
  let impact (list 0 -10 -20 -10 -20)
  set production production + (round(yearsExploited / 5) * (item landscapetype impact))
end

to impactAgriculturalStructure
  if haveTools [set production production + 20]
end

;Ajoute des structures sur les piece of land qui n'en n'ont pas
to addStructure
  let setpatch (patch-set listofpatches)
  ask setpatch with [haveTools = false] [
    set haveTools true
  ]
  set managed managed + 1
end

;Fonction qui change le climat tout les 5 ticks
to changeClimat
  if(ticks mod 5 = 0)[
    let clim random(5)
    ask patches[
      set climat clim
      set agrologicalPower (item climat(item landscapeType climatique-data))
    ]
  ]
end

;Fonction qui incrémente/décrémente le nombre d'années
;d'exploitation des patches (piece of land)
to increment-years-exploited
  ask patches [
    ifelse exploited [set yearsExploited (yearsExploited + 1)]
    [if yearsExploited > 0 [ set yearsExploited (yearsExploited - 1)]]
  ]
end

;Fonction qui incrémente l'age des exploitations
to increment-age-exploitations
  ask exploitations [ set age age + 1 ]
end

;Charge le fichier contenant le tableau des pouvoirs agricoles
to load-climatique
  ;let file user-file
let file "climatique.txt"
  if(file != false)
  [
    set climatique-data []
    file-open file
    while [ not file-at-end? ]
    [set climatique-data sentence climatique-data (list (list file-read file-read file-read file-read file-read))]
   ]
     ;user-message "Climatique load complete..."
     file-close
end

;Applique des changements de couleurs
to show-color
  ifelse show-color?
  [setupcolorlandscape colorville colorexploitation];true
  [
    ask patches [
    set pcolor black
    ]
    colorville
    colorexploitation
  ]  ;false
end

;colorie les villes
to colorville
  ask towns[
    ask (patch-set listofpatch) [set pcolor white] 
  ]
end

;colorie les exploitations
to colorexploitation
  ask exploitations[
    ask (patch-set listofpatches) [set pcolor [color] of owner [landowner] of myself]
    ask patch-here [set pcolor black]
  ]
end


;Appeler par une exploitation
to-report not-enough-villa?
  let _owner owner landowner 
  let _nbvilla count (turtle-set [listExploitation] of _owner) with [typeOfExploitation = "villa"]
  
  report _nbvilla < ([minNumberVilla] of _owner)
end

;Appeler par une exploitation
to do-farm
  set typeOfExploitation "farm"
  set minsizeofland 2
  set maxsizeofland 10
end

;Appeler par une exploitation
to do-villa
  set typeOfExploitation "villa"
  set minsizeofland 11
  set maxsizeofland 100
end

;Applique le bonus de proudction des villas
to bonus-villa
  let _main-oeuvre 100
  set totalproduction totalproduction + _main-oeuvre
end

;Crée une exploitation proche de la capital
to create-near-capital
  let _capital one-of towns with [isCapital]
  let _near 27
  let _emplacementDispo patches with [distance _capital < _near and exploited = false]
  let _emplacement one-of _emplacementDispo
  let _own [landowner] of self
  
  ask _emplacement [
    set exploited true
    set pcolor black
    sprout-exploitations 1 [
      set landowner _own
      set shape "house"
      set listofpatches (list patch-here)
      set symbolicvalue random(4)
      set color [color] of owner _own
      set totalproduction 0
     do-villa 
      repeat minsizeofland [ enlarge2 listofpatches ]
      set notRentable 0
      set totalaccesibility 0
      ask owner _own [
          set listExploitation lput myself listExploitation
          ifelse ([typeOfExploitation] of myself) = "farm" [set farmbought farmbought + 1] [set villabought villabought + 1 ]
      ] ;; fin ask owner
    ] ;; fin sprout
  ] ;; fin ask emplacement
end